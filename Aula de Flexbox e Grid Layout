üß™ Laborat√≥rio de Programa√ß√£o Frontend
üìö Universidade de Vassouras
üë®‚Äçüè´ Prof. Rodrigo Ximenes
üéØ Aula 03 ‚Äî CSS Avan√ßado + Layout
üìÖ Conte√∫do da Aula
Flexbox e Grid Layout
Pseudo-classes e pseudo-elementos
Responsividade (media queries)
Exerc√≠cio: Landing page responsiva
üß© Flexbox e Grid Layout
O Flexbox e o Grid Layout s√£o m√≥dulos CSS modernos para criar layouts flex√≠veis e responsivos de forma r√°pida.

Flexbox ‚Äî Exemplo b√°sico

.container {
  display: flex;     /* ativa o Flexbox no container */
  gap: 20px;         /* define espa√ßamento de 20px entre os itens */
}
.item {
  background: #007acc; /* cor de fundo azul */
  color: white;        /* cor do texto branca */
  padding: 15px;       /* espa√ßo interno entre conte√∫do e borda */
  border-radius: 6px;  /* bordas arredondadas */
  flex: 1;             /* faz cada item ocupar igualmente o espa√ßo dispon√≠vel */
}
  
Flexbox √© ideal para organizar elementos em linha ou coluna, distribuindo o espa√ßo automaticamente.
Flexbox Froggy ‚Äî jogo pr√°tico Flexbox | Exemplo W3Schools Flexbox
Grid Layout ‚Äî Exemplo b√°sico

.grid {
  display: grid;                 /* ativa o Grid Layout */
  grid-template-columns: 1fr 2fr 1fr; /* define 3 colunas com propor√ß√£o 1:2:1 */
  gap: 15px;                     /* espa√ßamento entre linhas e colunas */
}
.box {
  background: #eef6fb;           /* cor de fundo clara */
  padding: 20px;                 /* espa√ßo interno */
  border-radius: 4px;            /* bordas arredondadas */
}
  
Grid Layout permite criar grades bidimensionais, facilitando layouts complexos.
CSS Grid Garden ‚Äî jogo pr√°tico Grid | Exemplo W3Schools Grid
üé® Pseudo-classes e pseudo-elementos
:hover ‚Äî muda o estilo ao passar o mouse (exemplo)
:focus ‚Äî muda o estilo ao focar (exemplo)
::before e ::after ‚Äî adicionam conte√∫do antes/depois do elemento (exemplo)

a:hover {
  color: #005a99;
  text-decoration: underline;
}
h2::after {
  content: " ‚ú®";
  color: #007acc;
}
  
üì± Responsividade (Media Queries)

@media (max-width: 600px) {
  body {
    padding: 10px;   /* reduz padding para telas pequenas */
  }
  h1 {
    font-size: 24px; /* diminui tamanho da fonte */
  }
}
  
Exemplo W3Schools Media Queries

üìò Diferen√ßa entre Padding, Margin e Border

+-------------------------------+
|           Margin              |
|  +-------------------------+  |
|  |         Border          |  |
|  |  +-------------------+  |  |
|  |  |      Padding      |  |  |
|  |  |  +-----------+    |  |  |
|  |  |  |  Content  |    |  |  |
|  |  |  +-----------+    |  |  |
|  |  +-------------------+  |  |
|  +-------------------------+  |
+-------------------------------+
  
CSS Box Model (W3Schools)

üîó Combinadores CSS

/* Descendant Combinator */
div p { color: blue; }

/* Child Combinator */
div > p { color: green; }

/* Next Sibling Combinator */
h2 + p { font-weight: bold; }

/* Subsequent Sibling Combinator */
h2 ~ p { font-style: italic; }
  
CSS Combinators (W3Schools)

üåê Recursos Extras
Guia Flexbox (CSS-Tricks)
Guia Grid (CSS-Tricks)
Media Queries (MDN)
W3Schools ‚Äî teste de CSS, HTML, JS
üß≠ Projeto EventHub ‚Äî O que vamos fazer
No EventHub, vamos criar uma landing page com:

Cabe√ßalho com logo e menu de navega√ß√£o usando Flexbox
Se√ß√£o de eventos em cards responsivos usando Grid Layout
Bot√µes "Inscrever-se" com :hover para interatividade
Layout responsivo com @media queries para celulares e tablets
Uso de combinadores CSS para aplicar estilos sem classes extras
üíª C√≥digo base EventHub

<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>EventHub</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>

  <header>
    <h1>EventHub</h1>
    <nav>
      <a href="#">Home</a> |
      <a href="#">Eventos</a> |
      <a href="#">Sobre</a> |
      <a href="#">Contato</a>
    </nav>
  </header>

  <main>
    <div class="container">
      <div class="item">
        <h2>Evento A</h2>
        <p>Descri√ß√£o do evento A</p>
        <button id="botaoA">Inscrever-se</button>
      </div>
      <div class="item">
        <h2>Evento B</h2>
        <p>Descri√ß√£o do evento B</p>
        <button id="botaoB">Inscrever-se</button>
      </div>
    </div>
  </main>

  <footer>
    ¬© 2025 EventHub. Todos os direitos reservados.
  </footer>

  <script src="js/script.js"></script>
</body>
</html>

<!-- CSS (css/style.css) -->
body {
  font-family: Arial, sans-serif;
  background-color: #f9f9f9;
  color: #333;
  margin: 0;
  padding: 20px;
}

header {
  background: #007acc;
  color: white;
  padding: 15px 20px;
}

header h1 {
  margin: 0;
}

header nav a {
  color: white;
  margin-right: 15px;
  text-decoration: none;
}

header nav a:hover {
  text-decoration: underline;
}

.container {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

.item {
  background: #eee;
  padding: 15px;
  border-radius: 6px;
  flex: 1;
}

.item h2 {
  margin-top: 0;
}

button {
  background: #007acc;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background: #005fa3;
}

footer {
  text-align: center;
  padding: 20px;
  color: #666;
  border-top: 1px solid #ccc;
  margin-top: 30px;
}
  
üíæ Commit no Git
Ap√≥s finalizar o layout, fa√ßa commit no seu reposit√≥rio local:


git add .
git commit -m "feat: criar layout EventHub com Flexbox, Grid e responsividade"
git push origin main
  
